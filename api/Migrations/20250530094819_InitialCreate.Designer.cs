// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250530094819_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Администрация"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Методический отдел"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Отдел комплектования"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Канцелярия"
                        });
                });

            modelBuilder.Entity("api.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CurrentUserId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CurrentUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 1, 9, 0, 0, 0, DateTimeKind.Utc),
                            CurrentUserId = 3,
                            SenderUserId = 1,
                            Status = "InProgress",
                            Title = "Запрос отчета по мероприятиям"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 3, 10, 0, 0, 0, DateTimeKind.Utc),
                            CurrentUserId = 4,
                            SenderUserId = 1,
                            Status = "SentToExecutor",
                            Title = "Закупка оборудования"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 5, 5, 12, 0, 0, 0, DateTimeKind.Utc),
                            CurrentUserId = 2,
                            SenderUserId = 1,
                            Status = "Approved",
                            Title = "Распоряжение о внутреннем собрании"
                        });
                });

            modelBuilder.Entity("api.Models.DocumentFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentFiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DocumentId = 1,
                            FilePath = "https://storage.yandexcloud.net/library-docs/doc1.pdf"
                        },
                        new
                        {
                            Id = 2,
                            DocumentId = 1,
                            FilePath = "https://storage.yandexcloud.net/library-docs/doc1-appendix.pdf"
                        },
                        new
                        {
                            Id = 3,
                            DocumentId = 2,
                            FilePath = "https://storage.yandexcloud.net/library-docs/doc2.pdf"
                        },
                        new
                        {
                            Id = 4,
                            DocumentId = 3,
                            FilePath = "https://storage.yandexcloud.net/library-docs/doc3.pdf"
                        });
                });

            modelBuilder.Entity("api.Models.DocumentRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<int>("FromUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ToUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("DocumentRoutes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = 0,
                            Comment = "Входящее письмо из департамента культуры",
                            DocumentId = 1,
                            FromUserId = 1,
                            SentAt = new DateTime(2024, 5, 1, 9, 30, 0, 0, DateTimeKind.Utc),
                            ToUserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Action = 0,
                            Comment = "Подготовьте, пожалуйста, отчет к утру",
                            DocumentId = 1,
                            FromUserId = 2,
                            SentAt = new DateTime(2024, 5, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            ToUserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Action = 0,
                            Comment = "Нужна смета на оборудование",
                            DocumentId = 2,
                            FromUserId = 1,
                            SentAt = new DateTime(2024, 5, 3, 10, 30, 0, 0, DateTimeKind.Utc),
                            ToUserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Action = 2,
                            Comment = "Одобрено директором",
                            DocumentId = 3,
                            FromUserId = 1,
                            SentAt = new DateTime(2024, 5, 5, 12, 30, 0, 0, DateTimeKind.Utc),
                            ToUserId = 2
                        });
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 4,
                            Email = "secretary@library.local",
                            FullName = "Иванова Светлана Петровна",
                            Login = "secretary",
                            PasswordHash = "hashedpassword1",
                            Role = "Секретарь"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 1,
                            Email = "director@library.local",
                            FullName = "Сидоров Алексей Михайлович",
                            Login = "director",
                            PasswordHash = "hashedpassword2",
                            Role = "Директор"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 2,
                            Email = "methodist@library.local",
                            FullName = "Петрова Мария Алексеевна",
                            Login = "methodist",
                            PasswordHash = "hashedpassword3",
                            Role = "Исполнитель"
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 3,
                            Email = "supply@library.local",
                            FullName = "Козлов Дмитрий Сергеевич",
                            Login = "supply",
                            PasswordHash = "hashedpassword4",
                            Role = "Исполнитель"
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 2,
                            Email = "method2@library.local",
                            FullName = "Андреева Елена Викторовна",
                            Login = "method2",
                            PasswordHash = "hashedpassword5",
                            Role = "Исполнитель"
                        });
                });

            modelBuilder.Entity("api.Models.Document", b =>
                {
                    b.HasOne("api.Models.User", "CurrentUser")
                        .WithMany()
                        .HasForeignKey("CurrentUserId");

                    b.HasOne("api.Models.User", "SenderUser")
                        .WithMany()
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentUser");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("api.Models.DocumentFile", b =>
                {
                    b.HasOne("api.Models.Document", "Document")
                        .WithMany("Files")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("api.Models.DocumentRoute", b =>
                {
                    b.HasOne("api.Models.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.HasOne("api.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("api.Models.Document", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
