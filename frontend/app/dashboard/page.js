"use client";

import { useEffect, useState } from "react";

export default function DashboardPage() {
  const [currentUser, setCurrentUser] = useState(null);
  const [documentsInHand, setDocumentsInHand] = useState([]);
  const [documentsSent, setDocumentsSent] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
  useEffect(() => {
    const storedUser = localStorage.getItem("currentUser");
    if (storedUser) {
      setCurrentUser(JSON.parse(storedUser));
    }
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  // –û–ø—è—Ç—å –∂–µ, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä!!!!!!!!
  useEffect(() => {
    if (!currentUser) return;

    async function fetchDocuments() {
      try {
        const res = await fetch("http://localhost:5289/api/documents");
        if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤");

        const data = await res.json();

        // –í—Ä–µ–º–µ–Ω–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–ø—Ç
        setDocumentsInHand(data.filter(doc => doc.currentUserId === currentUser.id));
        setDocumentsSent(data.filter(doc => doc.senderUserId === currentUser.id));
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    }

    fetchDocuments();
  }, [currentUser]);

  if (!currentUser) return <p className="p-4">–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...</p>;
  if (loading) return <p className="p-4">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...</p>;
  if (error) return <p className="p-4 text-red-500">–û—à–∏–±–∫–∞: {error}</p>;

  return (
    <div className="min-h-screen bg-gray-50 p-6 text-gray-900">
      <header className="mb-10">
        <h1 className="text-2xl font-bold">–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {currentUser.fullName}!</h1>
        <p className="text-sm text-gray-500">
          {currentUser.role} / {currentUser.department?.name || "–ë–µ–∑ –æ—Ç–¥–µ–ª–∞"}
        </p>
      </header>

      <section className="mb-10">
        <h2 className="text-xl font-semibold mb-4">üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã —É –≤–∞—Å</h2>
        <div className="grid gap-4 grid-cols-1 sm:grid-cols-2 md:grid-cols-3">
          {documentsInHand.length > 0 ? (
            documentsInHand.map((doc) => (
              <DocumentCard key={doc.id} title={doc.title} status={doc.status} />
            ))
          ) : (
            <p>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.</p>
          )}
        </div>
      </section>

      <section>
        <h2 className="text-xl font-semibold mb-4">üì§ –î–æ–∫—É–º–µ–Ω—Ç—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏</h2>
        <div className="grid gap-4 grid-cols-1 sm:grid-cols-2 md:grid-cols-3">
          {documentsSent.length > 0 ? (
            documentsSent.map((doc) => (
              <DocumentCard key={doc.id} title={doc.title} status={doc.status} />
            ))
          ) : (
            <p>–í—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.</p>
          )}
        </div>
      </section>
    </div>
  );
}

function DocumentCard({ title, status }) {
  const statusMap = {
    InProgress: "–í —Ä–∞–±–æ—Ç–µ",
    ReturnedForRevision: "–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ",
    Approved: "–û–¥–æ–±—Ä–µ–Ω–æ",
    SentToExecutor: "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é",
  };

  return (
    <div className="bg-white p-4 rounded-lg shadow border border-gray-200 hover:shadow-md transition">
      <h3 className="font-medium text-lg mb-2">{title}</h3>
      <p className="text-sm text-gray-500">{statusMap[status] || "–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"}</p>
    </div>
  );
}
